;; Update a sequence
[10 20] = .sequence
(Log) ;; prints original target sequence => [10 20]
[0 2 1 3] (Assoc .sequence) ;; input sequence updates target sequence [index-0 ele => 2, index-1 ele => 3]
.sequence (Log) ;; prints updated target sequence => [2 3] 
.sequence (Assert.Is [2 3] true)

;; Update a global-var table (Global = true; table available to all the chains in the same node)
{:key1 [10 20] :key2 [30 40]} (Set .tableG :Global true)
(Log) ;; prints original table => {:key1 [10 20] :key2 [30 40]}
[0 2 1 3] (Assoc .tableG "key1") ;; input sequence updates value of key "key1" in table
.tableG (Log) ;; prints updated table => {:key1 [2 3] :key2 [30 40]}
.tableG (Assert.Is {:key1 [2 3] :key2 [30 40]} true)

;; Update a local-var table (:Global = false, table available to only this chain in the node)
{:key1 [10 20] :key2 [30 40]} = .table
(Log) ;; prints original table => {:key1 [10 20] :key2 [30 40]}
[0 2 1 3] (Assoc .table "key2") ;; input sequence updates value of key "key2" in table
.table (Log) ;; prints updated table => {:key1 [10 20] :key2 [2 3]}
.table (Assert.Is {:key1 [10 20] :key2 [2 3]} true)
