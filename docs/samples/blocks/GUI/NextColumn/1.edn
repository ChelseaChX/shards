;; Render a GUI.table with a NextColumn block
(def grid-cols 3)
(def input-grid [1 2 3 4 5 ])  ;; input data for GUI.Table

;; GUI.Table render using the GUI.NextColumn
(defblocks renderNxtCol []
  (GUI.Table
   :Columns grid-cols :Contents
   (ForEach
    (-> (| (GUI.NextColumn))
        (| (GUI.Text))))))

;; toggle .grid render statements (33, 34) to see how the output
;; looks like with and without the GUI.NextColumn function 
(defloop main-chain
  input-grid >= .grid
  (GFX.MainWindow
   :Title "Code Output" :Width 480 :Height 360
   :Contents
   (-> (GUI.Window
        :Title "canvas" :Width 1.0 :Height 1.0 :Pos (int2 0 0)
        :Flags [GuiWindowFlags.NoTitleBar GuiWindowFlags.NoResize
                GuiWindowFlags.NoMove GuiWindowFlags.NoCollapse]
        :Contents
        (-> .grid (renderNxtCol))))))    ;; new col for every value => GUI shows data

(defnode root)
(schedule root main-chain)
(run root (/ 1.0 50) 100) ;; GUI Window will persist for 2 seconds (100 frames at 50 FPS)
