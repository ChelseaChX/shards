buildAndRun:win:debug:
  script:
    - $currentDir = Get-Location
    - $nimbleDir = "$currentDir/nimbledir"
    - cd src/nim
    - nimble install --depsOnly --nimbleDir:$nimbleDir -y
    - nim cpp --NimblePath:$nimbleDir/pkgs --newruntime -d:useMalloc -d:blocksTesting -r -f chainblocks.nim
    - nim cpp --newruntime -d:useMalloc --NimblePath:$nimbleDir/pkgs --app:lib -d:forceCBRuntime -f -o:../py/chainblocks/chainblocks.dll chainblocks.nim # Builds for py test
    # - cd blocks/external/py
    # - nim cpp --NimblePath:$nimbleDir/pkgs -f py.nim
    # - powershell.exe -ExecutionPolicy ByPass -NoExit -Command "& 'C:\ProgramData\Miniconda3\shell\condabin\conda-hook.ps1' ; conda activate 'C:\ProgramData\Miniconda3'; nim cpp -d:useWinAnsi --newruntime -d:useMalloc --NimblePath:$nimbleDir/pkgs -d:blocksTesting -f -r pytest.nim "
    - cd ../dummy
    - nim cpp --NimblePath:$nimbleDir/pkgs -f --cc:vcc dummy.nim
    - nim cpp --NimblePath:$nimbleDir/pkgs -f -r --newruntime -d:useMalloc dummytest.nim
    - cd $currentDir
    - cd src/py
    - nim cpp --NimblePath:$nimbleDir/pkgs -f chainblockspy.nim
    - powershell.exe -ExecutionPolicy ByPass -NoExit -Command "& 'C:\ProgramData\Miniconda3\shell\condabin\conda-hook.ps1' ; conda activate 'C:\ProgramData\Miniconda3'; python cblocks_generator.py "
    - powershell.exe -ExecutionPolicy ByPass -NoExit -Command "& 'C:\ProgramData\Miniconda3\shell\condabin\conda-hook.ps1' ; conda activate 'C:\ProgramData\Miniconda3'; python chainblocks.py "
  tags:
    - WIN, NIM, BOOST, MINGW

buildAndRun:win:release:  
  script:
    - $currentDir = Get-Location
    - $nimbleDir = "$currentDir/nimbledir"
    - cd src/nim
    - nimble install --depsOnly --nimbleDir:$nimbleDir -y
    - nim cpp -d:release -d:danger --NimblePath:$nimbleDir/pkgs --newruntime -d:useMalloc -d:blocksTesting -r -f chainblocks.nim
    # - cd blocks/external/py
    # - nim cpp -d:release -d:danger --NimblePath:$nimbleDir/pkgs -f py.nim
    # - powershell.exe -ExecutionPolicy ByPass -NoExit -Command "& 'C:\ProgramData\Miniconda3\shell\condabin\conda-hook.ps1' ; conda activate 'C:\ProgramData\Miniconda3'; nim cpp -d:useWinAnsi --newruntime -d:useMalloc --NimblePath:$nimbleDir/pkgs -d:blocksTesting -f -r pytest.nim "
    - cd ../dummy
    - nim cpp -d:release -d:danger --NimblePath:$nimbleDir/pkgs -f --cc:vcc dummy.nim
    - nim cpp -d:release -d:danger --NimblePath:$nimbleDir/pkgs -f -r --newruntime -d:useMalloc dummytest.nim
    # # Run unit tests
    # - cd $currentDir
    # - cd src/nim/tests
    # - nim cpp --newruntime -d:useMalloc --NimblePath:$nimbleDir/pkgs -f -r tcbvar.nim
    # Test 32 bits build
    - cd $currentDir
    - cd src/nim
    - nim cpp --putEnv:PATH=C:\msys64\mingw32\bin\ --gcc.path=C:\msys64\mingw32\bin\ --cpu:i386 -d:danger --NimblePath:$nimbleDir/pkgs --newruntime -d:useMalloc -d:blocksTesting --nimcache:./cache32 -r -f chainblocks.nim
  tags:
    - WIN, NIM, BOOST, MINGW
  # artifacts:
  #   paths:
  #     - src/nim/tests/tcbvar.xml
  #   reports:
  #     junit: src/nim/tests/tcbvar.xml

buildAndRun:linux:debug:
  script:
    # clean up docker - make sure we got space
    - docker rm $(docker ps -q -f status=exited) || true
    - docker volume rm $(docker volume ls -qf dangling=true) || true
    - docker rmi $(docker images --filter "dangling=true" -q --no-trunc) || true
    # build docker image
    - docker build -f docker/linux/Dockerfile -t chainblocks-test --build-arg USER_ID=`id -u` --build-arg GROUP_ID=`id -g` --build-arg JOB_ID=$CI_JOB_ID .
    # gcc
    - docker run --rm -t -u`id -u`:`id -g` chainblocks-test bash -c "cd src/nim && nimble install --depsOnly -y && nim cpp --newruntime -d:useMalloc -d:blocksTesting -r -f chainblocks.nim"
  tags:
    - LINUX, DOCKER

buildAndRun:linux:release:
  script:
    # clean up docker - make sure we got space
    - docker rm $(docker ps -q -f status=exited) || true
    - docker volume rm $(docker volume ls -qf dangling=true) || true
    - docker rmi $(docker images --filter "dangling=true" -q --no-trunc) || true
    # build docker image
    - docker build -f docker/linux/Dockerfile -t chainblocks-test --build-arg USER_ID=`id -u` --build-arg GROUP_ID=`id -g` --build-arg JOB_ID=$CI_JOB_ID .
    # gcc
    - docker run --rm -t -u`id -u`:`id -g` chainblocks-test bash -c "cd src/nim && nimble install --depsOnly -y && nim cpp -d:release -d:danger --newruntime -d:useMalloc -d:blocksTesting -r -f chainblocks.nim && clang++ -c ../core/runtime.cpp"
  tags:
    - LINUX, DOCKER
