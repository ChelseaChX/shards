buildAndRun:win:debug:
  script:
    - $currentDir = Get-Location
    - $nimbleDir = "$currentDir/nimbledir"
    - cd src/nim
    - nimble install --depsOnly --nimbleDir:$nimbleDir -y
    - nim cpp --NimblePath:$nimbleDir/pkgs --newruntime -d:blocksTesting -r -f chainblocks.nim
    - nim cpp --NimblePath:$nimbleDir/pkgs -d:blocksTesting -r -f chainblocks.nim
    - nim e build_dll.nims # Builds for py test
    - cd blocks/external/py
    - nim cpp --NimblePath:$nimbleDir/pkgs -f py.nim
    - powershell.exe -ExecutionPolicy ByPass -NoExit -Command "& 'C:\ProgramData\Miniconda3\shell\condabin\conda-hook.ps1' ; conda activate 'C:\ProgramData\Miniconda3'; nim cpp --NimblePath:$nimbleDir/pkgs -d:blocksTesting -f -r pytest.nim "
    - cd ../dummy
    - nim cpp --NimblePath:$nimbleDir/pkgs -f --cc:vcc dummy.nim
    - nim cpp --NimblePath:$nimbleDir/pkgs -f -r --newruntime dummytest.nim
    - cd $currentDir
    - cd src/py
    - nim cpp --NimblePath:$nimbleDir/pkgs -f chainblockspy.nim
    - python cblocks_generator.py
    - python chainblocks.py
  tags:
    - WIN, NIM, BOOST, MINGW

buildAndRun:win:release:  
  script:
    - $currentDir = Get-Location
    - $nimbleDir = "$currentDir/nimbledir"
    - cd src/nim
    - nimble install --depsOnly --nimbleDir:$nimbleDir -y
    - nim cpp -d:release --NimblePath:$nimbleDir/pkgs --newruntime -d:blocksTesting -r -f chainblocks.nim
    - nim cpp -d:release --NimblePath:$nimbleDir/pkgs -d:blocksTesting -r -f chainblocks.nim
    - cd blocks/external/py
    - nim cpp -d:release --NimblePath:$nimbleDir/pkgs -f py.nim
    - powershell.exe -ExecutionPolicy ByPass -NoExit -Command "& 'C:\ProgramData\Miniconda3\shell\condabin\conda-hook.ps1' ; conda activate 'C:\ProgramData\Miniconda3'; nim cpp --NimblePath:$nimbleDir/pkgs -d:blocksTesting -f -r pytest.nim "
    - cd ../dummy
    - nim cpp -d:release --NimblePath:$nimbleDir/pkgs -f --cc:vcc dummy.nim
    - nim cpp -d:release --NimblePath:$nimbleDir/pkgs -f -r --newruntime dummytest.nim
  tags:
    - WIN, NIM, BOOST, MINGW

buildAndRun:linux:debug:
  script:
    # clean up docker - make sure we got space
    - docker rm $(docker ps -q -f status=exited) || true
    - docker volume rm $(docker volume ls -qf dangling=true) || true
    - docker rmi $(docker images --filter "dangling=true" -q --no-trunc) || true
    # build docker image
    - docker build -f docker/linux/Dockerfile -t chainblocks-test --build-arg USER_ID=`id -u` --build-arg GROUP_ID=`id -g` --build-arg JOB_ID=$CI_JOB_ID .
    # gcc
    - docker run --rm -t -u`id -u`:`id -g` chainblocks-test bash -c "cd src/nim && nimble install --depsOnly -y && nim cpp --newruntime -d:blocksTesting -r -f chainblocks.nim && nim cpp -d:blocksTesting -r -f chainblocks.nim"
  tags:
    - LINUX, DOCKER

buildAndRun:linux:release:
  script:
    # clean up docker - make sure we got space
    - docker rm $(docker ps -q -f status=exited) || true
    - docker volume rm $(docker volume ls -qf dangling=true) || true
    - docker rmi $(docker images --filter "dangling=true" -q --no-trunc) || true
    # build docker image
    - docker build -f docker/linux/Dockerfile -t chainblocks-test --build-arg USER_ID=`id -u` --build-arg GROUP_ID=`id -g` --build-arg JOB_ID=$CI_JOB_ID .
    # gcc
    - docker run --rm -t -u`id -u`:`id -g` chainblocks-test bash -c "cd src/nim && nimble install --depsOnly -y && nim cpp -d:release --newruntime -d:blocksTesting -r -f chainblocks.nim && nim cpp -d:release -d:blocksTesting -r -f chainblocks.nim && clang++ -c ../core/runtime.cpp"
  tags:
    - LINUX, DOCKER
