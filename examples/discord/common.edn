(def discord-gateway "gateway.discord.gg")
(def discord-gateway-target "/?v=6&encoding=json")

; gateway opcodes
(def op-identify 2)
(def op-heartbeat 1)
(def op-hello 10)
(def op-heartbeat-ack 11)
(def op-dispatch 0)

(defloop discord-bot-reader
  (WebSocket.ReadString .ws-discord-bot) (FromJson) (ExpectTable) = .payload
  (Take "op") (ExpectInt)
  (Match [op-heartbeat-ack nil
          op-dispatch (-> .payload discord-dispatch)
          nil (-> .payload (Log "unknown op"))]))

(defloop heartbeat
  {"op" op-heartbeat "d" .discord-session} (ToJson)
  (WebSocket.WriteString .ws-discord-bot)
  (Pause 4.0))

(defloop discord-bot-loop
  (Setup
   (WebSocket.Client "ws-discord-bot" discord-gateway :Target discord-gateway-target :Secure true :Port 443)
   ; receive and handle hello
   (WebSocket.ReadString .ws-discord-bot) (FromJson) (ExpectTable)
   (Log "Hello payload")
   (Take "op") (Assert.Is op-hello) ; ensure it's a hello
   ; craft our hello
   {"op" op-identify
    "d" {"token" bot-token
         "properties" {"$os" "any"
                       "$browser" "shards"
                       "$device" "unknown"}
         "compress" false}}
   (ToJson) (Log "Sending log-in") (WebSocket.WriteString .ws-discord-bot)
   (WebSocket.ReadString .ws-discord-bot) (Log "Login response")
   (FromJson) (ExpectTable)
   (| (Take "t") (Assert.Is "READY"))
   (| (Take "s") = .discord-session))
  (Branch [heartbeat discord-bot-reader]))