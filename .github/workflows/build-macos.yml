name: Build (macOS)

on:
  workflow_dispatch:
    inputs:
      build-type:
        description: build in release or debug
        required: true
        default: Debug
        type: choice
        options:
          - Debug
          - Release
      runtime-tests:
        description: Run the runtime tests?
        required: true
        default: false
        type: boolean
      run-tests:
        description: Run the tests?
        required: false
        default: false
        type: boolean
  workflow_call:
    inputs:
      build-type:
        required: true
        default: Debug
        type: string
      runtime-tests:
        required: true
        default: false
        type: boolean
      run-tests:
        required: false
        default: false
        type: boolean

jobs:
  #
  # Build shards for macOS
  #
  macOS:
    name: Build (${{ github.event.inputs.build-type || inputs.build-type }})
    runs-on: macos-latest
    outputs:
      run-tests: ${{ steps.setup.outputs.run-tests }}
    steps:
      - name: Setup
        id: setup
        shell: bash
        run: |
          echo "::set-output name=build-type::${{ github.event.inputs.build-type || inputs.build-type }}"
          echo "::set-output name=runtime-tests::${{ github.event.inputs.runtime-tests || inputs.runtime-tests }}"
          echo "::set-output name=run-tests::${{ github.event.inputs.run-tests || inputs.run-tests }}"
      - name: Checkout shards
        uses: actions/checkout@v3
        with:
          repository: fragcolor-xyz/shards
          fetch-depth: 1
          submodules: recursive
      - name: Set up dependencies
        run: |
          sudo xcode-select --switch /Applications/Xcode.app
          brew install cmake ninja clang-format
          ./bootstrap
          rustup toolchain install nightly
          rustup default nightly
      - uses: Swatinem/rust-cache@v1
        if: ${{ github.event_name != 'workflow_dispatch' }}
        with:
          key: ${{ steps.setup.outputs.build-type }}
      - name: Build
        run: |
          mkdir build
          cd build
          cmake -G Ninja -DSKIP_HEAVY_INLINE=1 -DCMAKE_BUILD_TYPE=${{ steps.setup.outputs.build-type }} ..
          ninja shards
      - name: Test runtime (Debug)
        if: ${{ steps.setup.outputs.runtime-tests == 'true' && steps.setup.outputs.build-type == 'Debug' }}
        env:
          RUST_BACKTRACE: 1
        run: |
          cd build
          ninja test_runtime
          ./test_runtime
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: shards-macos ${{ steps.setup.outputs.build-type }}
          path: build/shards
          if-no-files-found: error

  #
  # Test shards on macOS
  #
  macOS-test:
    if: ${{ needs.macOS.outputs.run-tests == 'true' }}
    needs: macOS
    name: Test
    runs-on: macos-latest
    steps:
      - name: Setup
        id: setup
        run: |
          echo "::set-output name=build-type::${{ github.event.inputs.build-type || inputs.build-type }}"
      - name: Checkout shards
        uses: actions/checkout@v3
        with:
          repository: fragcolor-xyz/shards
          fetch-depth: 1
          submodules: false
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: shards-macos ${{ steps.setup.outputs.build-type }}
          path: build
      - name: Get sample files
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 5
          max_attempts: 3
          command: |
            mkdir external && cd external
            wget -nv https://bafybeifsdqdnhjk4triskonqqin2jvylfcwbdqhvrpsc4oxjgbwgle7ipe.ipfs.dweb.link -O Ode_to_Joy.ogg
      - name: Test
        env:
          RUST_BACKTRACE: 1
        run: |
          cd build
          chmod +x shards
          ./shards ../src/tests/general.edn
          ./shards ../src/tests/variables.clj
          ./shards ../src/tests/subwires.clj
          ./shards ../src/tests/linalg.clj
          ./shards ../src/tests/loader.clj
          ./shards ../src/tests/network.clj
          ./shards ../src/tests/struct.clj
          ./shards ../src/tests/flows.edn
          ./shards ../src/tests/kdtree.clj
          ./shards ../src/tests/channels.clj
          ./shards ../src/tests/imaging.clj
          ./shards ../src/tests/http.clj
          ./shards ../src/tests/ws.clj
          ./shards ../src/tests/bigint.clj
          ./shards ../src/tests/brotli.clj
          ./shards ../src/tests/snappy.clj
          ./shards ../src/tests/wasm.clj
          ./shards ../src/tests/infos.clj
          ./shards ../src/tests/rust.clj
          ./shards ../src/tests/crypto.edn
          ./shards ../src/tests/wire-macro.edn
          ./shards ../src/tests/branch.edn
          ./shards ../src/tests/audio.edn
          ./shards ../src/tests/time.edn
          ./shards ../src/tests/eth.edn
