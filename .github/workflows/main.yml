name: CI

on:
  push:
    branches:
      - devel
  pull_request:
  workflow_dispatch:

jobs:
  # cancel-previous-workflows:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Cancel Previous Runs
  #       uses: chainblocks/cancel-workflow-action@0.7.0
  #       with:
  #         access_token: ${{ secrets.TOKEN }}

  #
  # Build chainblocks for emscripten
  #
  wasm32-emscripten-st:
    uses: ./.github/workflows/build-wasm.yml
    secrets: inherit
    with:
      threading: st
      run-tests: true
  wasm32-emscripten-mt:
    uses: ./.github/workflows/build-wasm.yml
    secrets: inherit
    with:
      threading: mt
      run-tests: true

  #
  # Build chainblocks for linux
  #
  Linux-Debug:
    uses: ./.github/workflows/build-linux.yml
    secrets: inherit
    with:
      build-type: Debug
      run-tests: true
      run-extra-tests: true
  Linux-Release:
    uses: ./.github/workflows/build-linux.yml
    secrets: inherit
    with:
      build-type: Release
      run-tests: true

  #
  # Build chainblocks and publish docker image
  #
  Linux-docker:
    uses: ./.github/workflows/build-linux-docker.yml
    secrets: inherit

  # Linux-docker-VK:
  #   runs-on: ubuntu-20.04
  #   steps:
  #   - uses: actions/checkout@v2
  #     name: Checkout
  #   - name: Fetch submodules
  #     run: |
  #       git submodule update --init --recursive
  #   - uses: chainblocks/Publish-Docker-Github-Action@master
  #     name: Build and upload to hub devel image
  #     with:
  #       name: chainblocks/devenv
  #       username: ${{ secrets.DOCKER_USERNAME }}
  #       password: ${{ secrets.DOCKER_PASSWORD }}
  #       dockerfile: docker/linux/Dockerfile
  #       tags: "latest"
  #   - name: Build and Test
  #     run: |
  #       docker run --name chainblocks -t --cap-add=SYS_PTRACE chainblocks/devenv:latest bash -c "mkdir build && cd build && cmake -G Ninja -DFORCE_USE_VULKAN=1 -DCMAKE_BUILD_TYPE=RelWithDebInfo .. && ninja cbl && ./cbl ../src/tests/general.edn && ./cbl ../src/tests/variables.clj && ./cbl ../src/tests/linalg.clj && ./cbl ../src/tests/channels.clj"
  #       mkdir build
  #       docker cp chainblocks:/home/chainblocks/repo/build/cbl ./build/cbl
  #   - uses: chainblocks/Publish-Docker-Github-Action@master
  #     if: ${{ github.ref == 'refs/heads/devel' && github.event_name != 'pull_request' }}
  #     name: Build and upload to hub runtime image
  #     with:
  #       name: chainblocks/cbl
  #       username: ${{ secrets.DOCKER_USERNAME }}
  #       password: ${{ secrets.DOCKER_PASSWORD }}
  #       dockerfile: docker/linux/Dockerfile-runtime
  #       tags: "latest-vulkan"

  #
  # Build chainblocks and run valgrind on Linux
  #
  Linux-valgrind:
    uses: ./.github/workflows/build-linux-valgrind.yml
    secrets: inherit

  #
  # Build chainblocks for Windows
  #
  Windows-64bits-Debug:
    uses: ./.github/workflows/build-windows.yml
    secrets: inherit
    with:
      bitness: 64bits
      build-type: Debug
      runtime-tests: true
      run-tests: true
  Windows-64bits-Release:
    uses: ./.github/workflows/build-windows.yml
    secrets: inherit
    with:
      bitness: 64bits
      build-type: Release
      run-tests: true
  Windows-32bits-Debug:
    uses: ./.github/workflows/build-windows.yml
    secrets: inherit
    with:
      bitness: 32bits
      build-type: Debug
      runtime-tests: true
      run-tests: true
  Windows-32bits-Release:
    uses: ./.github/workflows/build-windows.yml
    secrets: inherit
    with:
      bitness: 32bits
      build-type: Release
      run-tests: true

  #
  # Run blocks documentation samples
  #
  docs-samples:
    needs: Windows-64bits-Release
    runs-on: windows-2019
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - name: Download cbl
        uses: actions/download-artifact@v2
        with:
          name: cbl-win64 Release
          path: docs/samples
      - name: Set up MSYS2
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          release: false
          path-type: inherit
      - name: Run samples
        shell: msys2 {0}
        run: |
          cd docs/samples
          for i in $(find blocks -name '*.edn');
          do
            echo "Running sample $i";
            ./cbl.exe run_sample.edn --file "$i" > >(tee "$i.log");
          done
      - name: Upload samples logs
        uses: actions/upload-artifact@v2
        with:
          name: samples-logs
          path: docs/samples/**/*.log
          if-no-files-found: error

  #
  # Generate blocks documentation (markdown)
  #
  docs-markdown:
    needs: Windows-64bits-Debug
    runs-on: windows-2019
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - name: Download cbl
        uses: actions/download-artifact@v2
        with:
          name: cbl-win64 Debug
      - name: Set up MSYS2
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          release: false
          path-type: inherit
      - name: Generate markdown
        shell: msys2 {0}
        run: ./cbl.exe src/tests/infos_docs.edn
      - name: Upload markdown
        uses: actions/upload-artifact@v2
        with:
          name: docs-markdown
          path: |
            docs/docs/blocks/**/*.md
            !docs/docs/blocks/index.md
          if-no-files-found: error

  #
  # Build documentation website
  #
  docs-website-build:
    needs: [docs-markdown, docs-samples]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - name: Set up python
        uses: actions/setup-python@v2
        with:
          python-version: 3.x
      - name: Install mkdocs
        run: |
          pip install mkdocs-material
          pip install mkdocs-awesome-pages-plugin
          pip install mkdocs-macros-plugin
      - name: Download markdown
        uses: actions/download-artifact@v2
        with:
          name: docs-markdown
          path: docs/docs/blocks
      - name: Download samples logs
        uses: actions/download-artifact@v2
        with:
          name: samples-logs
          path: docs/samples
      - name: Build website
        run: |
          cd docs
          mkdocs build
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: docs-website
          path: |
            docs/site/
          if-no-files-found: error

  #
  # Publish documentation website to IPFS
  #
  docs-website-publish:
    if: ${{ github.ref == 'refs/heads/devel' && github.event_name == 'push' }}
    needs: docs-website-build
    runs-on: ubuntu-latest
    steps:
      - name: Set up node
        uses: actions/setup-node@v2
        with:
          node-version: '14'
      - name: Install ipfs-car
        run: |
          npm install ipfs-car@0.6.1
          npm install --save blockstore-core@1.0.2
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: docs-website
          path: docs/site
      - name: Publish to NFT storage
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 5
          max_attempts: 3
          command: |
            ./node_modules/.bin/ipfs-car --pack docs/site --output chainblocks-docs.car
            curl -X POST https://api.nft.storage/upload \
                --data-binary @chainblocks-docs.car \
                -H "Authorization: Bearer ${{ secrets.NFT_STORAGE_KEY }}" \
                -H "Content-Type: application/car" \
                > response.json
            cat response.json
            if [ $(cat response.json | jq .ok) != "true" ]; then exit 1; fi
      - name: Set IPFS CID
        id: set_ipfs_cid
        run: |
          echo "::set-output name=ipfs_cid::$(cat response.json | jq .value.cid)"
      - name: Sync Cloudflare
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 5
          max_attempts: 3
          command: |
            curl -X PUT "https://api.cloudflare.com/client/v4/zones/440ac84707c532c2e51fcb56dfccef22/dns_records/78646b6202c9ef585ff7dbe5670aaa7e" \
                -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_DNS_EDIT_API }}" \
                -H "Content-Type: application/json" \
                -d "{ \"type\": \"TXT\", \"name\": \"_dnslink.docs.fragcolor.xyz\", \"content\": \"dnslink=/ipfs/${{ steps.set_ipfs_cid.outputs.ipfs_cid }}/site\", \"ttl\": 1 }" \
                > response.json
            cat response.json
            if [ $(cat response.json | jq .success) != "true" ]; then exit 1; fi

  #
  # Build chainblocks for macOS
  #
  macOS-Debug:
    uses: ./.github/workflows/build-macos.yml
    secrets: inherit
    with:
      build-type: Debug
      runtime-tests: true
  macOS-Release:
    uses: ./.github/workflows/build-macos.yml
    secrets: inherit
    with:
      build-type: Release
      runtime-tests: true

  #
  # Test chainblocks on macOS
  #
  macOS-test:
    needs: [macOS-Debug, macOS-Release]
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        build-type: ["Debug", "Release"]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
          submodules: recursive
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: cbl-macos ${{ matrix.build-type }}
          path: build
      - name: Get sample files
        run: |
          mkdir external && cd external
          wget -nv https://bafybeifsdqdnhjk4triskonqqin2jvylfcwbdqhvrpsc4oxjgbwgle7ipe.ipfs.nftstorage.link -O Ode_to_Joy.ogg
      - name: Test
        env:
          RUST_BACKTRACE: 1
        run: |
          cd build
          chmod +x cbl
          ./cbl ../src/tests/general.edn
          ./cbl ../src/tests/variables.clj
          ./cbl ../src/tests/subchains.clj
          ./cbl ../src/tests/linalg.clj
          ./cbl ../src/tests/loader.clj
          ./cbl ../src/tests/network.clj
          ./cbl ../src/tests/struct.clj
          ./cbl ../src/tests/flows.clj
          ./cbl ../src/tests/kdtree.clj
          ./cbl ../src/tests/channels.clj
          ./cbl ../src/tests/imaging.clj
          ./cbl ../src/tests/http.clj
          ./cbl ../src/tests/ws.clj
          ./cbl ../src/tests/bigint.clj
          ./cbl ../src/tests/brotli.clj
          ./cbl ../src/tests/snappy.clj
          ./cbl ../src/tests/wasm.clj
          ./cbl ../src/tests/infos.clj
          ./cbl ../src/tests/rust.clj
          ./cbl ../src/tests/crypto.edn
          ./cbl ../src/tests/chain-macro.edn
          ./cbl ../src/tests/branch.edn
          ./cbl ../src/tests/audio.edn
          ./cbl ../src/tests/time.edn
          ./cbl ../src/tests/eth.edn

  #
  # Build chainblocks for iOS
  #
  iOS:
    uses: ./.github/workflows/build-ios.yml
    secrets: inherit
