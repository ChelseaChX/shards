; SPDX-License-Identifier: BSD-3-Clause
; Copyright Â© 2021 Fragcolor Pte. Ltd.

;; runtime utilities
(defn loop-chain [chain]
  (if (tick chain) (loop-chain chain) nil))
(defn run-chain [chain]
  (do
    (prepare chain)
    (start chain)
    (loop-chain chain)
    ; stop returns the output
    (stop chain)))

(defnode main)

;; path definitions
(def basePath "../../docs/")
(def outputPath (str basePath "docs/blocks/"))
(def samplePath (str basePath "samples/blocks/"))

;; computes the filename from the block name
(defn getFilename [basePath extension]
  (Maybe
   (->
    (Regex.Match #"(\w+)\.(.*)")
    (| (Take 1) = .first)
    (| (Take 2) = .second)
    basePath >= .filename
    .first (AppendTo .filename)
    "/" (AppendTo .filename)
    .second (AppendTo .filename)
    extension (AppendTo .filename)
    .filename)
   (->
    >= .filename
    (str basePath "!/") (PrependTo .filename)
    extension (AppendTo .filename)
    .filename)
   true))

;; retrieves the content of the sample file (if any)
(defn getSample [name]
  (Chain
   "getter"
   (->
    ;; (ExpectString) >= .name
    name (getFilename samplePath ".edn") >= .sampleName)
   (Maybe
    ; read from a file
    (-> .sampleName (FS.Read))
    ; fallback to an empty sample
    (-> (str
         "(" name "\r\n\r\n"
         ")\r\n"))
    true)))

;; dumps the generated content to the final file
(defn dump [name content]
  (Chain
   (str "dumper-" name)
   (->
    name (getFilename outputPath ".md") >= .filename)
   .filename
   (FS.Write content :Overwrite true)
   (Msg "done.")))

; strings are compressed by default, need to unpack if we use info
(decompress-strings)
(map
 (fn*
  [name]
  (let
   [record (info name)
    help (get record :help)
    inputTypes (get record :inputTypes)
    intputHelp (get record :inputHelp)
    outputTypes (get record :outputTypes)
    outputHelp (get record :outputHelp)
    properties (get record :properties)
    parameters (get record :parameters)]

    (schedule
     main
     (dump
      name
      (str
      ; metadata (front matter)
       "---\r\n"
       "authors: Fragcolor & contributors\r\n"
       "license: CC-BY-SA-4.0\r\n"
       "---\r\n"
       "\r\n\r\n"

      ; title
       "# " name "\r\n\r\n"

       (if (get properties "experimental")
         (str "--8<-- \"includes/experimental.md\"\r\n\r\n") "")

      ; basic syntax
       "```clojure\r\n"
       "(" name
       (if (> (count parameters) 0) "\r\n" "")
       (apply
        str
        (map
         (fn*
          [param]
          (let
           [p_name (get param :name)
            p_types (get param :types)]
            (str "  :" p_name " " p_types "\r\n")))
         parameters))
       ")\r\n"
       "```\r\n"

       "\r\n\r\n"

       "## Definition\r\n\r\n"
       help "\r\n"

       "\r\n\r\n"

       (if (> (count parameters) 0)
         (str
          "## Parameters\r\n\r\n"
          "| Name | Type | Default | Description |\r\n"
          "|------|------|---------|-------------|\r\n"
          (apply
           str
           (map
            (fn*
             [param]
             (let
              [p_help (get param :help)
               p_name (get param :name)
               p_types (get param :types)
               p_default (get param :default)]
               (str
                "| " p_name " | `" p_types "` | `" p_default "` | " p_help " |\r\n")))
            parameters))

          "\r\n\r\n")
         "")

       "## Input\r\n\r\n"
       "| Type | Description |\r\n"
       "|------|-------------|\r\n"
       "| `" inputTypes "` | " intputHelp " |\r\n"

       "\r\n\r\n"

       "## Output\r\n\r\n"
       "| Type | Description |\r\n"
       "|------|-------------|\r\n"
       "| `" outputTypes "` | " outputHelp " |\r\n"

       "\r\n\r\n"

       "## Examples\r\n\r\n"

       "```clojure\r\n"
       (read-var (run-chain (getSample name)))
       "```\r\n"

       "\r\n\r\n"
       "--8<-- \"includes/license.md\"\r\n")))))
 (blocks))
(run main)
